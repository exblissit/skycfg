# Copyright 2018 The Skycfg Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

v2 = proto.package("envoy.api.v2")
corev2 = proto.package("envoy.api.v2.core")
endpointv2 = proto.package("envoy.api.v2.endpoint")
listenerv2 = proto.package("envoy.api.v2.listener")
routev3 = proto.package("envoy.config.route.v3")
bootstrapv2 = proto.package("envoy.config.bootstrap.v2")

hcmv3 = proto.package("envoy.extensions.filters.network.http_connection_manager.v3")

protobuf = proto.package("google.protobuf")


def address(addr, port):
    return corev2.Address(
        socket_address=corev2.SocketAddress(
            address=addr,
            port_value=port,
        )
    )


def virtual_host(name):
    return routev3.VirtualHost(
        name=name,
        domains=["*"],
        routes=[
            routev3.Route(
                match=routev3.RouteMatch(prefix="/"),
                route=routev3.RouteAction(cluster=name),
            ),
        ],
    )


def hcm():
    return hcmv3.HttpConnectionManager(
        stat_prefix="ingress_http",
        codec_type=hcmv3.HttpConnectionManager.CodecType.AUTO,
        route_config=routev3.RouteConfiguration(
            name="local_route",
            virtual_hosts=[
                virtual_host("local_service"),
            ],
        ),
    )


def listener():
    http_connection_manager = hcm()
    return v2.Listener(
        name="listener_0",
        address=address("127.0.0.1", 10000),
        filter_chains=[
            listenerv2.FilterChain(
                filters=[
                    listenerv2.Filter(
                        name="envoy.filters.network.http_connection_manager",
                        typed_config=protobuf.Any(
                            type_url="type.googleapis.com/"
                            + proto.name(http_connection_manager),
                            value=proto.to_proto(http_connection_manager),
                        ),
                    ),
                ],
            )
        ],
    )


def cluster():
    return v2.Cluster(
        name="local_service",
        connect_timeout=protobuf.Duration(
            seconds=0,
            nanos=250000000,
        ),
        type=v2.Cluster.DiscoveryType.STATIC,
        lb_policy=v2.Cluster.LbPolicy.ROUND_ROBIN,
        load_assignment=v2.ClusterLoadAssignment(
            cluster_name="local_service",
            endpoints=[
                endpointv2.LocalityLbEndpoints(
                    lb_endpoints=[
                        endpointv2.LbEndpoint(
                            endpoint=endpointv2.Endpoint(
                                address=address("127.0.0.1", 1234),
                            )
                        )
                    ],
                ),
            ],
        ),
    )


def main(ctx):
    bootstrap = bootstrapv2.Bootstrap(
        static_resources=bootstrapv2.Bootstrap.StaticResources(
            listeners=[
                listener(),
            ],
            clusters=[
                cluster(),
            ],
        )
    )
    return [bootstrap]
